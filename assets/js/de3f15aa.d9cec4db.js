"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8772],{9288:(i,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var t=n(5893),o=n(1151);const r={description:"Is ghidriff useful for my platform?"},s=void 0,d={id:"README/Supported Platforms",title:"Supported Platforms",description:"Is ghidriff useful for my platform?",source:"@site/docs/README/Supported Platforms.md",sourceDirName:"README",slug:"/README/Supported Platforms",permalink:"/ghidriff/docs/README/Supported Platforms",draft:!1,unlisted:!1,editUrl:"https://github.com/clearbluejar/ghidriff/tree/main/www/docs/docs/README/Supported Platforms.md",tags:[],version:"current",frontMatter:{description:"Is ghidriff useful for my platform?"},sidebar:"tutorialSidebar",previous:{title:"Ghidriff vs Bindiff",permalink:"/ghidriff/docs/README/Ghidriff vs Bindiff"},next:{title:"Guides",permalink:"/ghidriff/docs/category/guides"}},l={},a=[{value:"Installation / Running",id:"installation--running",level:2},{value:"Diffing on various platforms (or where is this useful?)",id:"diffing-on-various-platforms-or-where-is-this-useful",level:2},{value:"Windows",id:"windows",level:3},{value:"Mac / iOS",id:"mac--ios",level:2},{value:"Android",id:"android",level:2},{value:"Linux / iOT",id:"linux--iot",level:2}];function f(i){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",...(0,o.a)(),...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"installation--running",children:"Installation / Running"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"ghidriff"})," will run anywhere Python will run. Follow the ",(0,t.jsx)(e.a,{href:"/ghidriff/docs/README/Quick%20Start%20Environment%20Setup",children:"Quick Start Setup"})," for details."]}),"\n",(0,t.jsx)(e.h2,{id:"diffing-on-various-platforms-or-where-is-this-useful",children:"Diffing on various platforms (or where is this useful?)"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["Will ",(0,t.jsx)(e.code,{children:"ghidriff"})," diff my platform?"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Always."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["Will ",(0,t.jsx)(e.code,{children:"ghidriff"})," do it well??"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"That depends.  :)"}),"\n",(0,t.jsx)(e.p,{children:"You should be able to diff any binary that Ghidra can analyze and decompile. Typically, this native code outside of frameworks."}),"\n",(0,t.jsx)(e.h3,{id:"windows",children:"Windows"}),"\n",(0,t.jsxs)(e.p,{children:["Binary diffing  with ",(0,t.jsx)(e.code,{children:"ghidriff"})," Windows works best with native Windows binaries (unmanaged) vs(managed) .NET code. It's not impossible, but diffing managed code via Ghidra has mixed results. You are better off using something like ",(0,t.jsx)(e.a,{href:"https://github.com/dnSpy/dnSpy",children:"dnSpy"})," to decompile the application and then just text diff the result."]}),"\n",(0,t.jsx)(e.h2,{id:"mac--ios",children:"Mac / iOS"}),"\n",(0,t.jsx)(e.p,{children:"Ghidra is getting much better at analyzing and decompiling objective-c.  Mac/iOS binaries both x64 and arm64 should work. Give it a shot."}),"\n",(0,t.jsx)(e.h2,{id:"android",children:"Android"}),"\n",(0,t.jsx)(e.p,{children:"For any native arm binary Ghidra should do well. If you want to through in an APK, you will need to pull out the binaries to diff."}),"\n",(0,t.jsx)(e.h2,{id:"linux--iot",children:"Linux / iOT"}),"\n",(0,t.jsx)(e.p,{children:"Again, if Ghidra can handle the analysis, give it a shot."})]})}function c(i={}){const{wrapper:e}={...(0,o.a)(),...i.components};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(f,{...i})}):f(i)}},1151:(i,e,n)=>{n.d(e,{Z:()=>d,a:()=>s});var t=n(7294);const o={},r=t.createContext(o);function s(i){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function d(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(o):i.components||o:s(i.components),t.createElement(r.Provider,{value:e},i.children)}}}]);