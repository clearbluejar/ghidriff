"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[5282],{2500:(i,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>f});var t=r(5893),n=r(1151);const a={sidebar_position:1},s=void 0,d={id:"ghidriff",title:"ghidriff",description:"Ghidriff - Ghidra Binary Diffing Engine",source:"@site/docs/ghidriff.md",sourceDirName:".",slug:"/ghidriff",permalink:"/ghidriff/docs/ghidriff",draft:!1,unlisted:!1,editUrl:"https://github.com/clearbluejar/ghidriff/tree/main/www/docs/docs/ghidriff.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"README",permalink:"/ghidriff/docs/category/readme"}},o={},f=[{value:"Ghidriff - Ghidra Binary Diffing Engine",id:"ghidriff---ghidra-binary-diffing-engine",level:2}];function l(i){const e={a:"a",code:"code",em:"em",h2:"h2",img:"img",p:"p",...(0,n.a)(),...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{align:"center",children:["\n",(0,t.jsx)(e.img,{src:"https://github.com/clearbluejar/ghidriff/assets/3752074/170f1a54-24d9-4c8e-ac4d-3b5bea860750",width:"60%"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{align:"center",children:["    \n",(0,t.jsx)(e.img,{align:"center",alt:"GitHub Workflow Status (with event)",src:"https://img.shields.io/github/actions/workflow/status/clearbluejar/ghidriff/pytest-devcontainer.yml?label=pytest&style=for-the-badge"}),"\n",(0,t.jsx)(e.img,{align:"center",alt:"PyPI - Downloads",src:"https://img.shields.io/pypi/dm/ghidriff?color=yellow&label=PyPI%20downloads&style=for-the-badge"}),"\n",(0,t.jsx)(e.img,{align:"center",src:"https://img.shields.io/github/stars/clearbluejar/ghidriff?style=for-the-badge"}),"\n"]}),(0,t.jsx)(e.h2,{id:"ghidriff---ghidra-binary-diffing-engine",children:"Ghidriff - Ghidra Binary Diffing Engine"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"ghidriff"})," provides a command-line binary diffing capability with a fresh take on diffing workflow and results."]}),"\n",(0,t.jsxs)(e.p,{children:["It leverages the power of Ghidra's ProgramAPI and ",(0,t.jsx)(e.a,{href:"https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html",children:"FlatProgramAPI"})," to find the ",(0,t.jsx)(e.em,{children:"added"}),", ",(0,t.jsx)(e.em,{children:"deleted"}),", and ",(0,t.jsx)(e.em,{children:"modified"})," functions of two arbitrary binaries. It is written in Python3 using ",(0,t.jsx)(e.code,{children:"pyhidra"})," to orchestrate Ghidra and ",(0,t.jsx)(e.code,{children:"jpype"})," as the Python to Java interface to Ghidra."]}),"\n",(0,t.jsx)(e.p,{children:'Its primary use case is patch diffing. Its ability to perform a patch diff with a single command makes it ideal for automated analysis. The diffing results are stored in JSON and rendered in markdown (optionally side-by-side HTML). The markdown output promotes "social" diffing, as results are easy to publish in a gist or include in your next writeup or blog post.'})]})}function c(i={}){const{wrapper:e}={...(0,n.a)(),...i.components};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(l,{...i})}):l(i)}},1151:(i,e,r)=>{r.d(e,{Z:()=>d,a:()=>s});var t=r(7294);const n={},a=t.createContext(n);function s(i){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function d(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(n):i.components||n:s(i.components),t.createElement(a.Provider,{value:e},i.children)}}}]);